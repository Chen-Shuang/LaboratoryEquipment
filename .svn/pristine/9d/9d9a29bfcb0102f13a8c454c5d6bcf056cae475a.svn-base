package scjhgl;

import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


import scjhgl.Cprscjh;
import scjhgl.Bom;
import scjhgl.Kcxx;
import scjhgl.Zzpscdd;
import scjhgl.Xsdd;
import com.jfinal.core.Controller;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;

public class XsddController extends Controller {
	public void index() {
		/*List<Order> list1 = Order.dao
				.find("select * from scjhgl_xsdd where ypcsl=0"); // 待排产 	|| ypcsl=0 || dpcsl=null 
		setAttr("iteration", list1);
		List<Order> list2 = Order.dao
				.find("select * from scjhgl_xsdd where ddzt='已排产' "); // 已排产		0<ypcsl && dpcsl<sl
		List<Order> list3 = Order.dao
				.find("select * from scjhgl_xsdd where ddzt='已闭单'"); // 已闭单
	    setAttr("iteration2", list2);
		setAttr("iteration3", list3);
		
		int pageNumber; //p为指定跳转的页面
		if(getParaToInt("pn")==null){pageNumber=1;
		}else{pageNumber=getParaToInt("pn");} //对页码参数进行处理 int pageSize;
		//指定每一页的显示数量
		if(getParaToInt("ps")==null){pageSize=10;}else{pageSize=getParaToInt
		("ps");} //对一页的数量的参数进行处理
		 
		Page<Order> list4 = Order.dao.paginate(pageNumber,
		pageSize,"select *", "from scjhgl_xsdd"); //所有订单 int
		x=list4.getTotalPage(); //共展示的页数 int y=list4.getPageSize(); //页码的大小
		int z=list4.getTotalRow(); //数据库中数据总共的条数
		
		String skip=""; for(int q=1;q<=x;q++) {
		skip=skip+"<a href=\"scjhgl/index?pn="+q+"&ps="+y+"\">"+q+"</a>" ;
		//循环把链接输出 1 2 3 ,&nbsp;&nbsp;空格，ps是避免修改页面大小后恢复页面数改变 }
		setAttr("iteration4", list4); setAttr("pn",pageNumber);
		setAttr("TotalPage",x); setAttr("PageSize",y); setAttr("TotalRow",z);
		setAttr("skip",skip); */

		renderFreeMarker("ddxi.html");
	}

	public void getMenuList() {
		List dataList = Db.find("select * from ac_act");
		Map<String, Object> resp = new HashMap<String, Object>();
		resp.put("code", 0);
		resp.put("content", dataList);
		renderJson(resp);
	}

	public void console() {
		// renderFreeMarker("console.html");
		renderFreeMarker("console.html");
	}

	public void c() { // 增
		getModel(Xsdd.class).save();
		redirect("/#scjhgl/index");
	}

/*	public void r() { // 查
		Object[] paramArr = { "%" + getPara("searchValue") + "%" };// 存取paramArr
		if (paramArr.equals("") || paramArr.equals(null)) {
		} else {
			List<Order> list = Order.dao.find("select * from scjhgl_xsdd where ddh like ?", paramArr); 
			renderFreeMarker("list.html");
		}
	}
*/
//	public void ReturnJson() {
//		renderJson(Xsdd.dao.findById(getParaToInt("id")));
//	}

	public void u() { // 改1
		Xsdd xsdd=getModel(Xsdd.class,"scjhgl_xsdd");
		xsdd.update();
		redirect("/#scjhgl");

	}
	
	public void u1() { // 改2
		Xsdd xsdd=getModel(Xsdd.class,"scjhgl_xsdd");
		xsdd.update();
		redirect("/#scjhgl");

	}

	public void d() { // 删
		Xsdd.dao.deleteById(getPara("id"));
		renderText("success");
	}

	public void yrks(){    		//插入更新 已入库数
		Integer id = getParaToInt(0);
		Integer yrks = getParaToInt("yrks");
		Xsdd.dao.findById(id).set("yrks",yrks).update();
		redirect("/#scjhgl/index");
	}
	public void PC1(){      					 //初次排产 待排产->已排产
		/*Integer x[] = getParaValuesToInt("ids");
		for (int i = 0; i < x.length; i++) {
			System.out.println(x[i]);
			//Order.dao.find("update scjhgl_xsdd set ddzt='已排产' where id="+ids[i]);
		}*/
		String idlist =getPara("idlist");
		
		System.out.println(idlist);
		String ids[]=idlist.split(",");
		SimpleDateFormat ddd = new SimpleDateFormat("yyyy-MM-dd");
		String dt=ddd.format(new Date());
		List<Cprscjh>ccpp=Cprscjh.dao.find("select * from scjhgl_cprscjh where rscjhbh='"+dt+"' and scbzbh=10 ");
		int tt=ccpp.size();//先获得原有数据的条数
		System.out.println(tt);
		for (int j = 0; j < ids.length; j++) {
			int id=Integer.valueOf(ids[j]);
			System.out.println(id);
			Xsdd.dao.findById(id).set("ddzt","已排产").update();     			 //-----------------------------------更改订单状态
			
			Cprscjh cp = new Cprscjh();
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");			
			Xsdd column1 =Xsdd.dao.findByIdLoadColumns (id, "ddh,chbm,sl,chmc"); 		//从销售订单表中获取某一id行的数据				     	 
				cp.set("zxbh",j+1+tt)//执行编号自动加1
				  .set("ddh",column1.getLong("ddh"))    	 //取得数据
				  .set("chbm",column1.getLong("chbm"))    //存货编码
				  .set("pcsl",column1.getInt("sl"))	     //默认为订单数量 _次排产数量
				  .set("rscjhbh",df.format(new Date()))            //插入 日生产计划表 中时的时间=日生产计划编号
				  .set("chmc", column1.getStr("chmc"));    //存货名称
				cp.save();
			           			 					 //----------------------------------------------向 产品日生产计划表 插入 数据
		
			
			//List<Order> order = Order.dao.find("select * from scjhgl_xsdd");
			//List<Zzpscdd> zzpscdd = Zzpscdd.dao.find("select * from scjhgl_zzpscdd");  //获取 自制品生产订单表 中的所有信息
					
				Zzpscdd zz = new Zzpscdd();
				Xsdd column2 = Xsdd.dao.findByIdLoadColumns(id,"ddh,chbm,sl ,khjc, fhrq");  	//根据传入的id，搜寻所在列 ,存货编码 即为 母件编码
					Long chbm =column2.getLong("chbm");    //存货编码
					
					List<Bom> bom = Bom.dao.find("select * from scjhgl_bom where zjsx = '自制'&& mjbh="+chbm);   //查找boom表中对应  母件编号(存货编码)的自制信息
					List<Kcxx> kcxx = Kcxx.dao.find("select  scjhgl_bom.zjbm,kcl from scjhgl_kcxx,scjhgl_bom where scjhgl_kcxx.zjbm = scjhgl_bom.zjbm");      //获取 库存信息表 中的 库存量(通过子件编码 )

					int dpcs,scsl;   //需要计算得出
					int xql,jbyl;    //bom表
					int kcl;
					int ypcs=0; //已排产数 默认为0 ,累加
					int sl = column2.getInt("sl");    //订单数量 _销售订单表
					
					for (int i = 0; i <bom.size(); i++) {            //每个id对应的多个 自制品
						 kcl = kcxx.get(i).getInt("kcl");  //库存量 _Kcxx表
						jbyl = bom.get(i).getInt("jbyl");  //基本用量_bom表
						
						xql= sl * jbyl; 		//需求量 =订单数量 * 基本用量
						if(xql - kcl<0){		//生产数量
							scsl = xql;  		
						}else {
							scsl=xql-kcl;
						}
						dpcs = scsl - ypcs; 	 //待排产数
						
						zz.set("ddh", column2.getLong("ddh"))  // 订单号 _销售订单表  一 对 多
						  .set("zjbm", bom.get(i).get("zjbm"))   //子件编码 _bom表
						  .set("zjmc", bom.get(i).get("zjmc"))  //子件名称_bom表
						  .set("zjgg", bom.get(i).get("zjgg"))  //子件规格_bom表
						  .set("jl", bom.get(i).get("jl"))   //计量_bom表
						  .set("xql", xql)     
						  .set("dpcs",dpcs)
						  .set("ypcs", ypcs)
						  .set("scsl", scsl);
						zz.save();				 //-----------------------------------------------------------------------向自制品生产订单表插入数据
					}	 
		}
		renderText("success");
	}
	
	public void PC2(){       // 已排产->已排产
     String idlist =getPara("idlist");
		
		System.out.println(idlist);
		String ids[]=idlist.split(",");
		SimpleDateFormat ddd = new SimpleDateFormat("yyyy-MM-dd");
		String dt=ddd.format(new Date());
		List<Cprscjh>ccpp=Cprscjh.dao.find("select * from scjhgl_cprscjh where rscjhbh='"+dt+"' and scbzbh=10 ");
		int tt=ccpp.size();//先获得原有数据的条数
		for (int j = 0; j < ids.length; j++) {
			int id=Integer.valueOf(ids[j]);
			System.out.println(id);
		
		
		Cprscjh cp = new Cprscjh();
		Xsdd column =Xsdd.dao.findByIdLoadColumns (id, "ddh,chbm,sl,chmc"); 		//从销售订单表中获取某一id行的数据
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		
		cp.set("zxbh",j+1+tt)
		  .set("ddh",column.getLong("ddh"))    	 //取得数据
		  .set("chbm",column.getLong("chbm"))    //存货编码
		  .set("pcsl",column.getInt("sl"))	     //默认为订单数量 _次排产数量
		  .set("rscjhbh",df.format(new Date()))            //插入 日生产计划表 中时的时间=日生产计划编号
		  .set("chmc", column.getStr("chmc"));    //存货名称
		cp.save();												 //----------------------------------------------向 产品日生产计划表 插入 数据
		
		Zzpscdd zz = new Zzpscdd();
		Xsdd column2 = Xsdd.dao.findByIdLoadColumns(id,"ddh,chbm,sl ,khjc, fhrq");  	//根据传入的id，搜寻所在列 ,存货编码 即为 母件编码
			Long chbm =column2.getLong("chbm");    //存货编码
			
			List<Bom> bom = Bom.dao.find("select * from scjhgl_bom where zjsx = '自制'&& mjbh="+chbm);   //查找boom表中对应  母件编号(存货编码)的自制信息
			List<Kcxx> kcxx = Kcxx.dao.find("select  scjhgl_bom.zjbm,kcl from scjhgl_kcxx,scjhgl_bom where scjhgl_kcxx.zjbm = scjhgl_bom.zjbm");      //获取 库存信息表 中的 库存量(通过子件编码 )

			int dpcs,scsl;   //需要计算得出
			int xql,jbyl;    //bom表
			int kcl;
			int ypcs=0; //已排产数 默认为0 ,累加
			int sl = column2.getInt("sl");    //订单数量 _销售订单表
			
			for (int i = 0; i <bom.size(); i++) {            //每个id对应的多个 自制品
				 kcl = kcxx.get(i).getInt("kcl");  //库存量 _Kcxx表
				jbyl = bom.get(i).getInt("jbyl");  //基本用量_bom表
				
				xql= sl * jbyl; 		//需求量 =订单数量 * 基本用量
				if(xql - kcl<0){		//生产数量
					scsl = xql;  		
				}else {
					scsl=xql-kcl;
				}
				dpcs = scsl - ypcs; 	 //待排产数
				
				zz.set("ddh", column2.getLong("ddh"))  // 订单号 _销售订单表  一 对 多
				  .set("zjbm", bom.get(i).get("zjbm"))   //子件编码 _bom表
				  .set("zjmc", bom.get(i).get("zjmc"))  //子件名称_bom表
				  .set("zjgg", bom.get(i).get("zjgg"))  //子件规格_bom表
				  .set("jl", bom.get(i).get("jl"))   //计量_bom表
				  .set("xql", xql)     
				  .set("dpcs",dpcs)
				  .set("ypcs", ypcs)
				  .set("scsl", scsl);
				zz.save();						 //-----------------------------------------------------------------------向自制品生产订单表插入数据
			}	  
		}
		renderText("success");
}
	
	public void BD(){
		Integer id = getParaToInt(0);
		Xsdd.dao.findById(id).set("ddzt","已闭单").set("bdrq",new Date()).update();
		redirect("/#scjhgl/index");
	}
	
	public void Tbody_list1(){
		Page<?> dataPage= Db.paginate(getParaToInt("pageNumber", 1), 4, "SELECT *","FROM scjhgl_xsdd where ddzt='未排产' && ypcsl=0 ORDER BY ddh asc");   //未排产
		renderJson(dataPage);
	}
	public void Tbody_list2(){
		Page<?> dataPage= Db.paginate(getParaToInt("pageNumber", 1), 4, "SELECT *","FROM scjhgl_xsdd where ddzt='已排产' ORDER BY ddh asc");   //已排产
		renderJson(dataPage);
	}
	public void Tbody_list3(){
		Page<?> dataPage= Db.paginate(getParaToInt("pageNumber", 1), 4, "SELECT *","FROM scjhgl_xsdd where ddzt='已闭单' ORDER BY bdrq desc");   //已闭单
		renderJson(dataPage);
	}
	
	public void search1() throws UnsupportedEncodingException{     		// search for 未排产
		String require =getPara("require","");  	//得到result的值  默认值问"" 
		Page<?> dataPage=Db.paginate(getParaToInt("pageNumer",1), 4, "select *", "from scjhgl_xsdd where ddzt='未排产' && ddh like '%"+require+"%' ORDER BY ddh asc");
		if(dataPage.getList().isEmpty()){               //第一次搜索为空
				dataPage=Db.paginate(getParaToInt("pageNumer",1), 4, "select *", "from scjhgl_xsdd where ddzt='未排产' && khjc like '%"+require+"%' ORDER BY ddh asc");
					if(dataPage.getList().isEmpty()){          //第二次搜索为空
						dataPage=Db.paginate(getParaToInt("pageNumer",1), 4, "select *", "from scjhgl_xsdd where ddzt='未排产' && chbm like '%"+require+"%' ORDER BY ddh asc");
						if(dataPage.getList().isEmpty()){         //如果第三个条件也为空
							dataPage=Db.paginate(getParaToInt("pageNumer",1), 4, "select *", "from scjhgl_xsdd ddzt='未排产' ORDER BY ddh asc");
						}  
					}
				}              
		renderJson(dataPage);
	}
	public void search2() throws UnsupportedEncodingException{     		// search for 已排产
		String require =getPara("require","");  	//得到result的值  默认值问"" 
		Page<?> dataPage=Db.paginate(getParaToInt("pageNumer",1), 4, "select *", "from scjhgl_xsdd where ddzt='已排产' && ddh like '%"+require+"%' ORDER BY ddh asc");
		if(dataPage.getList().isEmpty()){               //第一次搜索为空
				dataPage=Db.paginate(getParaToInt("pageNumer",1), 4, "select *", "from scjhgl_xsdd where ddzt='已排产' && khjc like '%"+require+"%' ORDER BY ddh asc");
					if(dataPage.getList().isEmpty()){          //第二次搜索为空
						dataPage=Db.paginate(getParaToInt("pageNumer",1), 4, "select *", "from scjhgl_xsdd where ddzt='已排产' && chbm like '%"+require+"%' ORDER BY ddh asc");
						if(dataPage.getList().isEmpty()){         //如果第三个条件也为空
							dataPage=Db.paginate(getParaToInt("pageNumer",1), 4, "select *", "from scjhgl_xsdd ddzt='已排产' ORDER BY ddh asc");
						}  
					}
				}              
		renderJson(dataPage);
	}
	public void search3() throws UnsupportedEncodingException{     		// search for 已闭单
		String require =getPara("require","");  	//得到result的值  默认值问"" 
		Page<?> dataPage=Db.paginate(getParaToInt("pageNumer",1), 4, "select *", "from scjhgl_xsdd where ddzt='已闭单' && ddh like '%"+require+"%' ORDER BY ddh asc");
		if(dataPage.getList().isEmpty()){               //第一次搜索为空
				dataPage=Db.paginate(getParaToInt("pageNumer",1), 4, "select *", "from scjhgl_xsdd where ddzt='已闭单' && khjc like '%"+require+"%' ORDER BY ddh asc");
					if(dataPage.getList().isEmpty()){          //第二次搜索为空
						dataPage=Db.paginate(getParaToInt("pageNumer",1), 4, "select *", "from scjhgl_xsdd where ddzt='已闭单' && chbm like '%"+require+"%' ORDER BY ddh asc");
						if(dataPage.getList().isEmpty()){         //如果第三个条件也为空
							dataPage=Db.paginate(getParaToInt("pageNumer",1), 4, "select *", "from scjhgl_xsdd ddzt='已闭单' ORDER BY ddh asc");
						}  
					}
				}              
		renderJson(dataPage);
	}
}
